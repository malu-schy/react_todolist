{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/maluschymanski/Desktop/homework_sipgate/homework-maluechen-716992803757/app/src/TodoList.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { render } from '@testing-library/react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Button, Row, Col, Container, Form, ListGroup, Group, Label, Control, Text } from 'react-bootstrap';\nimport Confetti from \"react-confetti\";\nimport FigureImage from \"react-bootstrap/esm/FigureImage\";\n\nfunction onClickHandler(e) {\n  //preventDefault um Prozesse vorher zu beenden\n  e.preventDefault();\n}\n\nexport default class TodoList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`http://localhost:5000/todolist`).then(res => {\n      const todos = res.data;\n      this.setState({\n        todos\n      });\n    });\n  }\n\n  render() {\n    function yeah() {\n      alert(\"checked\");\n    }\n\n    const [newName, setName] = useState('');\n\n    function handleChange(e) {\n      setName(e.target.value);\n    }\n\n    const [height, setHeight] = useState(null);\n    const [width, setWidth] = useState(null);\n    let everythingDone = null;\n\n    function isEverythingDone() {\n      if (props.completed == true) {\n        everythingDone = /*#__PURE__*/_jsxDEV(Confetti, {\n          width: 1000,\n          height: 1000\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 32\n        }, this);\n      } else {\n        everythingDone = null;\n      }\n    }\n\n    const [isEdiging, notEditing] = useState(false);\n\n    function handleSubmit(e) {\n      var y = newName;\n\n      if (y == \"\" || y == \" \") {\n        // alert(\"add input\");\n        props.notifyEmptyInput();\n        e.preventDefault();\n        notEditing(false);\n      } else {\n        e.preventDefault();\n        props.editTodo(props.id, newName);\n        setName(\"\");\n        notEditing(false);\n      }\n    }\n\n    const editingView = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"checkboxes\",\n              id: \"todo-0\",\n              type: \"checkbox\",\n              defaultChecked: props.completed,\n              onChange: () => props.toggleTaskCompleted(props.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: props.id,\n              type: \"text\",\n              value: newName,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlID: \"Check02\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: onClickHandler,\n                variant: \"success\",\n                onClick: handleSubmit,\n                children: \"SAVE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: onClickHandler,\n                variant: \"danger\",\n                onClick: () => notEditing(false),\n                children: \"CANCEL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n\n    const normalView = /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [props.everythingDone, /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"checkboxes\",\n            id: \"todo-0\",\n            type: \"checkbox\",\n            defaultChecked: props.completed,\n            onChange: () => props.toggleTaskCompleted(props.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlID: \"Check02\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClickHandler,\n              variant: \"primary\",\n              onClick: () => notEditing(true),\n              children: \"EDIT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClickHandler,\n              variant: \"danger\",\n              onClick: () => props.deleteTodo(props.id),\n              children: \"DELETE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: isEdiging ? editingView : normalView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/maluschymanski/Desktop/homework_sipgate/homework-maluechen-716992803757/app/src/TodoList.js"],"names":["React","axios","render","Button","Row","Col","Container","Form","ListGroup","Group","Label","Control","Text","Confetti","FigureImage","onClickHandler","e","preventDefault","TodoList","Component","state","todos","componentDidMount","get","then","res","data","setState","yeah","alert","newName","setName","useState","handleChange","target","value","height","setHeight","width","setWidth","everythingDone","isEverythingDone","props","completed","isEdiging","notEditing","handleSubmit","y","notifyEmptyInput","editTodo","id","editingView","toggleTaskCompleted","normalView","name","deleteTodo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios';\nimport { render } from '@testing-library/react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Button, Row, Col, Container, Form, ListGroup, Group, Label, Control, Text } from 'react-bootstrap';\nimport Confetti from \"react-confetti\";\nimport FigureImage from \"react-bootstrap/esm/FigureImage\";\n\n\n\n\nfunction onClickHandler(e) {\n    //preventDefault um Prozesse vorher zu beenden\n    e.preventDefault();\n  }\n\nexport default class TodoList extends React.Component {\n    state = {\n        todos: []\n    }\n\n    componentDidMount() {\n        axios.get(`http://localhost:5000/todolist`)\n            .then(res => {\n                const todos = res.data;\n                this.setState({ todos });\n            })\n    }\n\n    render() {\n\n        function yeah() {\n            alert(\"checked\");\n          }\n        \n          const [newName, setName] = useState('');\n        \n          function handleChange(e) {\n            setName(e.target.value);\n          }\n        \n          const [height, setHeight] = useState(null);\n          const [width, setWidth] = useState(null);\n        \n          let everythingDone = null;\n        \n          function isEverythingDone() {\n            if (props.completed == true) {\n              everythingDone = <Confetti width={1000} height={1000} />\n            } else {\n              everythingDone = null;\n            }\n          }\n        \n          const [isEdiging, notEditing] = useState(false);\n        \n          function handleSubmit(e) {\n            var y = newName;\n            if (y == \"\" || y == \" \") {\n              // alert(\"add input\");\n              props.notifyEmptyInput();\n              e.preventDefault();\n              notEditing(false);\n            } else {\n              e.preventDefault();\n              props.editTodo(props.id, newName);\n              setName(\"\");\n              notEditing(false);\n            }\n          }\n        \n          const editingView = (\n        \n            <form onSubmit={handleSubmit}>\n              <ListGroup.Item>\n                <Row>\n                  <Col>\n                    <input className=\"checkboxes\" id=\"todo-0\" type=\"checkbox\" defaultChecked={props.completed} onChange={() => props.toggleTaskCompleted(props.id)} />\n                  </Col>\n                  <Col>\n                    {/* <Form.Group controlID=\"Text01\"> */}\n                    {/* <Form.Control type=\"input\"></Form.Control> */}\n                    {/* </Form.Group> */}\n                    <input id={props.id} type=\"text\" value={newName} onChange={handleChange} />\n                  </Col>\n                  <Col>\n                    <Form.Group controlID=\"Check02\">\n                      {/* <Button variant=\"success\">DONE</Button> */}\n                      <Button onClick={onClickHandler} variant=\"success\" onClick={handleSubmit}>SAVE</Button>\n                      <Button onClick={onClickHandler} variant=\"danger\" onClick={() => notEditing(false)}>CANCEL</Button>\n                    </Form.Group>\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n            </form>\n        \n          )\n        \n          const normalView = (\n        \n            <ListGroup.Item>\n              <Row>\n                {props.everythingDone}\n                <Col>\n                  <input className=\"checkboxes\" id=\"todo-0\" type=\"checkbox\" defaultChecked={props.completed} onChange={() => props.toggleTaskCompleted(props.id)} />\n                </Col>\n                <Col>\n                  {/* <Form.Group controlID=\"Text01\"> */}\n                  {/* <Form.Control type=\"input\"></Form.Control> */}\n                  {/* </Form.Group> */}\n                  {/* <TodoList/> */}\n                  {props.name}\n                </Col>\n                <Col>\n                  <Form.Group controlID=\"Check02\">\n                    {/* <Button variant=\"success\">DONE</Button> */}\n                    <Button onClick={onClickHandler} variant=\"primary\" onClick={() => notEditing(true)}>EDIT</Button>\n                    <Button onClick={onClickHandler} variant=\"danger\" onClick={() => props.deleteTodo(props.id)}>DELETE</Button>\n                  </Form.Group>\n                </Col>\n              </Row>\n            </ListGroup.Item>\n        \n          )\n        \n        \n          return (\n            <li>{isEdiging ? editingView : normalView}</li>\n          )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}