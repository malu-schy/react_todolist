{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/maluschymanski/Desktop/homework_sipgate/homework-maluechen-716992803757/app/src/App.js\";\n// TODO\n// Variablen unbenennen \n// noch einmal alle Kommentage checken! \n// wenn eine Task \"zur√ºckge√§ndert wird, dann darf nicht die push nachricht kommen \"\n// wenn todoliste empty, dann Textausgabe\nimport React, { useState, useRef, useEffect } from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // import Todo from \"./Todo\";\n\nimport TodoList from \"./TodoList\"; // import Input from \"./Input\";\n// import FilterButtons from \"./FilterButtons\";\n\nimport { Container, ListGroup } from 'react-bootstrap'; // import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\nimport AddTask from './AddTask';\nimport DeleteTask from './DeleteTask';\nimport ShowSingleItem from './ShowSingleItem'; //Definiere Toastcontainer:\n//um sp√§ter die Pushbenachrichtigungen aud die Seite zu pushen\n// toast.configure()\n//Filter definieren\n//1. All gibt alle eintr√§ge zur√ºck\n//2. Active gibt nur die Eintr√§ge zur√ºck, bei denen completed auf nicht true gesetzt ist\n//3. completed gibgt nur die Eintr√§ge zur√ºck, bei denen completed auf true gesetzt ist\n// const AllFilter = {\n//   All: () => true,\n//   NotCompleted: task => !task.completed,\n//   completed: task => task.completed\n// }\n//Filter werden als Array zur√ºckgegeben als Array \n// const FILTER_NAMES = Object.keys(AllFilter);\n//App ist die Parent-Komponente \n\nfunction App(props) {\n  //notify deklarieren und initialisieren - je nachdem welche Nachricht ausgegeben werden soll\n  // const notify = () => toast('JUHUU! YOU MADE IT üéâüéâüéâ');\n  // const notifyEmptyInput = () => toast('no input üò•');\n  //Callbackprop: wird ausgel√∂st, wenn in FilterButtons der Button \"get shit done geklickt wird\"\n  // function setActive(name) {\n  //   setFilter(name);\n  // }\n  // //Callbackprop: wird ausgel√∂st, wenn in FilterButtons der Button \"DONE\"\n  // function setAll(name) {\n  //   setFilter(name);\n  // }\n  // //Callbackprop: wird ausgel√∂st, wenn in FilterButtons der Button \"ARCHIVE\"\n  // function setDone(name) {\n  //   setFilter(name);\n  // }\n  // //status von Filter wird ge√§ndert -> Default m√§√üig werden nur die noch nicht erledigten Todos angezeigt \n  // const [filter, setFilter] = useState('NotCompleted');\n  // //Funktion setTasks: Soll die Eintr√§ge √§ndern\n  // //erste Tasks von index.js √ºbernommen \n  // const [tasks, setTasks] = useState(props.tasks);\n  // //RAUS?? \n  // // const [height, setHeight] = useState(null);\n  // // const [width, setWidth] = useState(null);\n  // //m√∂gliche Erweiterung: \n  // //Konfetti, wenn alle Aufgaben erledigt sind :) \n  // let everythingDone = null;\n  // //synchronisiert ob task completed ist\n  // function toggleTaskCompleted(id) {\n  //   const updatedTasks = tasks.map(task => {\n  //     if (id === task.id) {\n  //       notify();\n  //       return { ...task, completed: !task.completed }\n  //     }\n  //     return task;\n  //   });\n  //   setTasks(updatedTasks);\n  // }\n  // //L√∂scht das TODO mit der entsprechenden id\n  // function deleteTodo(id) {\n  //   const remainingTasks = tasks.filter(task => id !== task.id);\n  //   setTasks(remainingTasks);\n  // }\n  // //√§ndert name zu newName des Eintrages mit der entsprechenden id\n  // function editTodo(id, newName) {\n  //   const newTaskList = tasks.map(task => {\n  //     if (id === task.id) {\n  //       return { ...task, name: newName }\n  //     } else {\n  //       return task;\n  //     }\n  //   });\n  //   setTasks(newTaskList);\n  // }\n  // //Liste aller Eintr√§ge -> gefiltert je nach Filter \n  // //auf jeden Eintrag die TODO Komponente angewandt\n  // const taskList = tasks\n  //   .filter(AllFilter[filter])\n  //   .map(task => (\n  //     <Todo\n  //       id={task.id}\n  //       name={task.name}\n  //       completed={task.completed}\n  //       key={task.id}\n  //       toggleTaskCompleted={toggleTaskCompleted}\n  //       deleteTodo={deleteTodo}\n  //       editTodo={editTodo}\n  //       notifyEmptyInput={notifyEmptyInput}\n  //     />\n  //   )\n  //   );\n  // //Callback Hooks \n  // function addTask(name) {\n  //   const newTask = { id: \"id\", name: name, completed: false };\n  //   setTasks([...tasks, newTask]);\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u2728 NEW TODO \\u2728 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddTask, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u2728 DELETE TODO \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(DeleteTask, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u2728 YOUR TODO LIST \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"SHOW SINGLE ITEM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ShowSingleItem, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/maluschymanski/Desktop/homework_sipgate/homework-maluechen-716992803757/app/src/App.js"],"names":["React","useState","useRef","useEffect","TodoList","Container","ListGroup","AddTask","DeleteTask","ShowSingleItem","App","props"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAO,WAAP;AACA,OAAO,sCAAP,C,CACA;;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;AACA;;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,iBAArC,C,CACA;AACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAElB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE,QAAC,SAAD;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,eAiBE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAuBE,QAAC,SAAD;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF,eA2BE,QAAC,SAAD;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF,eAoCG,QAAC,SAAD;AAAA,gCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cApCH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6CD;;KAvIQD,G;AAwIT,eAAeA,GAAf","sourcesContent":["// TODO\n// Variablen unbenennen \n// noch einmal alle Kommentage checken! \n// wenn eine Task \"zur√ºckge√§ndert wird, dann darf nicht die push nachricht kommen \"\n// wenn todoliste empty, dann Textausgabe\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import Todo from \"./Todo\";\nimport TodoList from \"./TodoList\";\n// import Input from \"./Input\";\n// import FilterButtons from \"./FilterButtons\";\nimport { Container, ListGroup } from 'react-bootstrap';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\nimport AddTask from './AddTask';\nimport DeleteTask from './DeleteTask';\nimport ShowSingleItem from './ShowSingleItem';\n\n//Definiere Toastcontainer:\n//um sp√§ter die Pushbenachrichtigungen aud die Seite zu pushen\n// toast.configure()\n\n//Filter definieren\n//1. All gibt alle eintr√§ge zur√ºck\n//2. Active gibt nur die Eintr√§ge zur√ºck, bei denen completed auf nicht true gesetzt ist\n//3. completed gibgt nur die Eintr√§ge zur√ºck, bei denen completed auf true gesetzt ist\n// const AllFilter = {\n//   All: () => true,\n//   NotCompleted: task => !task.completed,\n//   completed: task => task.completed\n// }\n\n//Filter werden als Array zur√ºckgegeben als Array \n// const FILTER_NAMES = Object.keys(AllFilter);\n\n//App ist die Parent-Komponente \nfunction App(props) {\n\n  //notify deklarieren und initialisieren - je nachdem welche Nachricht ausgegeben werden soll\n  // const notify = () => toast('JUHUU! YOU MADE IT üéâüéâüéâ');\n  // const notifyEmptyInput = () => toast('no input üò•');\n\n  //Callbackprop: wird ausgel√∂st, wenn in FilterButtons der Button \"get shit done geklickt wird\"\n  // function setActive(name) {\n  //   setFilter(name);\n  // }\n\n  // //Callbackprop: wird ausgel√∂st, wenn in FilterButtons der Button \"DONE\"\n  // function setAll(name) {\n  //   setFilter(name);\n  // }\n\n  // //Callbackprop: wird ausgel√∂st, wenn in FilterButtons der Button \"ARCHIVE\"\n  // function setDone(name) {\n  //   setFilter(name);\n  // }\n\n  // //status von Filter wird ge√§ndert -> Default m√§√üig werden nur die noch nicht erledigten Todos angezeigt \n  // const [filter, setFilter] = useState('NotCompleted');\n\n  // //Funktion setTasks: Soll die Eintr√§ge √§ndern\n  // //erste Tasks von index.js √ºbernommen \n  // const [tasks, setTasks] = useState(props.tasks);\n\n  // //RAUS?? \n  // // const [height, setHeight] = useState(null);\n  // // const [width, setWidth] = useState(null);\n\n  // //m√∂gliche Erweiterung: \n  // //Konfetti, wenn alle Aufgaben erledigt sind :) \n  // let everythingDone = null;\n\n  // //synchronisiert ob task completed ist\n  // function toggleTaskCompleted(id) {\n  //   const updatedTasks = tasks.map(task => {\n  //     if (id === task.id) {\n  //       notify();\n  //       return { ...task, completed: !task.completed }\n  //     }\n  //     return task;\n  //   });\n  //   setTasks(updatedTasks);\n  // }\n\n  // //L√∂scht das TODO mit der entsprechenden id\n  // function deleteTodo(id) {\n  //   const remainingTasks = tasks.filter(task => id !== task.id);\n  //   setTasks(remainingTasks);\n  // }\n\n  // //√§ndert name zu newName des Eintrages mit der entsprechenden id\n  // function editTodo(id, newName) {\n  //   const newTaskList = tasks.map(task => {\n  //     if (id === task.id) {\n  //       return { ...task, name: newName }\n  //     } else {\n  //       return task;\n  //     }\n  //   });\n  //   setTasks(newTaskList);\n  // }\n\n  // //Liste aller Eintr√§ge -> gefiltert je nach Filter \n  // //auf jeden Eintrag die TODO Komponente angewandt\n  // const taskList = tasks\n  //   .filter(AllFilter[filter])\n  //   .map(task => (\n  //     <Todo\n  //       id={task.id}\n  //       name={task.name}\n  //       completed={task.completed}\n  //       key={task.id}\n  //       toggleTaskCompleted={toggleTaskCompleted}\n  //       deleteTodo={deleteTodo}\n  //       editTodo={editTodo}\n  //       notifyEmptyInput={notifyEmptyInput}\n  //     />\n  //   )\n  //   );\n\n  // //Callback Hooks \n  // function addTask(name) {\n  //   const newTask = { id: \"id\", name: name, completed: false };\n  //   setTasks([...tasks, newTask]);\n  // }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Container>\n          <h3>‚ú® NEW TODO ‚ú® </h3>\n          <div>\n            {/* <ToastContainer\n              position=\"top-right\"\n              autoClose={5000}\n              hideProgressBar={false}\n              newestOnTop={false}\n              closeOnClick\n              rtl={false}\n              pauseOnFocusLoss\n              draggable\n              pauseOnHover\n            /> */}\n            {/* Same as */}\n            {/* <ToastContainer /> */}\n          </div>\n          <AddTask/>\n          {/* <Input addTask={addTask} notifyEmptyInput={notifyEmptyInput} /> */}\n          {/* {filterList} */}\n          {/* <FilterButtons setActive={setActive} setAll={setAll} setDone={setDone}></FilterButtons> */}\n        </Container>\n        <Container>\n        <h3>‚ú® DELETE TODO ‚ú®</h3>\n        <DeleteTask/>\n        </Container>\n        <Container>\n          <h3>‚ú® YOUR TODO LIST ‚ú®</h3>\n          {/* <ul>\n            <ListGroup>\n              {taskList}\n            </ListGroup>\n          </ul> */}\n          <TodoList/>\n        </Container>\n         <Container>\n          <h3>SHOW SINGLE ITEM</h3>\n          <ShowSingleItem/>\n        </Container> \n      </header>\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}