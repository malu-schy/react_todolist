{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/maluschymanski/Desktop/homework_sipgate/homework-maluechen-716992803757/app/src/Todo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Button, Row, Col, Container, Form, ListGroup, Group, Label, Control, Text } from 'react-bootstrap';\nimport Confetti from \"react-confetti\";\nimport FigureImage from \"react-bootstrap/esm/FigureImage\";\nimport TodoList from \"./TodoList\";\nimport axios from 'axios';\n\nfunction onClickHandler(e) {\n  //preventDefault um Prozesse vorher zu beenden\n  e.preventDefault();\n}\n\nexport default function Todo(props) {\n  _s();\n\n  const state = {\n    todos: []\n  };\n\n  function componentDidMount() {\n    axios.get(`http://localhost:5000/todolist`).then(res => {\n      const todos = res.data;\n      this.setState({\n        todos\n      });\n    });\n  }\n\n  function yeah() {\n    alert(\"checked\");\n  }\n\n  const [newName, setName] = useState('');\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  const [height, setHeight] = useState(null);\n  const [width, setWidth] = useState(null);\n  let everythingDone = null;\n\n  function isEverythingDone() {\n    if (props.completed == true) {\n      everythingDone = /*#__PURE__*/_jsxDEV(Confetti, {\n        width: 1000,\n        height: 1000\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 24\n      }, this);\n    } else {\n      everythingDone = null;\n    }\n  }\n\n  const [isEdiging, notEditing] = useState(false);\n\n  function handleSubmit(e) {\n    var y = newName;\n\n    if (y == \"\" || y == \" \") {\n      // alert(\"add input\");\n      props.notifyEmptyInput();\n      e.preventDefault();\n      notEditing(false);\n    } else {\n      e.preventDefault();\n      props.editTodo(props.id, newName);\n      setName(\"\");\n      notEditing(false);\n    }\n  }\n\n  const editingView = /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"checkboxes\",\n            id: \"todo-0\",\n            type: \"checkbox\",\n            defaultChecked: props.completed,\n            onChange: () => props.toggleTaskCompleted(props.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            id: props.id,\n            type: \"text\",\n            value: newName,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlID: \"Check02\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClickHandler,\n              variant: \"success\",\n              onClick: handleSubmit,\n              children: \"SAVE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClickHandler,\n              variant: \"danger\",\n              onClick: () => notEditing(false),\n              children: \"CANCEL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n\n  const normalView = /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [props.everythingDone, /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"checkboxes\",\n          id: \"todo-0\",\n          type: \"checkbox\",\n          defaultChecked: props.completed,\n          onChange: () => props.toggleTaskCompleted(props.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: this.state.todos.map(todolist => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: todolist.todo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 45\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlID: \"Check02\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: onClickHandler,\n            variant: \"primary\",\n            onClick: () => notEditing(true),\n            children: \"EDIT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onClickHandler,\n            variant: \"danger\",\n            onClick: () => props.deleteTodo(props.id),\n            children: \"DELETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: isEdiging ? editingView : normalView\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Todo, \"6lr5RjXSpvEwR4TFP4XWXeLLwYk=\");\n\n_c = Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/maluschymanski/Desktop/homework_sipgate/homework-maluechen-716992803757/app/src/Todo.js"],"names":["React","useState","Button","Row","Col","Container","Form","ListGroup","Group","Label","Control","Text","Confetti","FigureImage","TodoList","axios","onClickHandler","e","preventDefault","Todo","props","state","todos","componentDidMount","get","then","res","data","setState","yeah","alert","newName","setName","handleChange","target","value","height","setHeight","width","setWidth","everythingDone","isEverythingDone","completed","isEdiging","notEditing","handleSubmit","y","notifyEmptyInput","editTodo","id","editingView","toggleTaskCompleted","normalView","map","todolist","todo","deleteTodo"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Button, Row, Col, Container, Form, ListGroup, Group, Label, Control, Text } from 'react-bootstrap';\nimport Confetti from \"react-confetti\";\nimport FigureImage from \"react-bootstrap/esm/FigureImage\";\nimport TodoList from \"./TodoList\";\nimport axios from 'axios';\n\n\n\nfunction onClickHandler(e) {\n  //preventDefault um Prozesse vorher zu beenden\n  e.preventDefault();\n}\n\nexport default function Todo(props) {\n\n  const state = {\n    todos: []\n}\n\nfunction componentDidMount(){\n    axios.get(`http://localhost:5000/todolist`)\n    .then(res => {\n        const todos = res.data;\n        this.setState({todos});\n    })\n}\n\n\n  function yeah() {\n    alert(\"checked\");\n  }\n\n  const [newName, setName] = useState('');\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  const [height, setHeight] = useState(null);\n  const [width, setWidth] = useState(null);\n\n  let everythingDone = null;\n\n  function isEverythingDone() {\n    if (props.completed == true) {\n      everythingDone = <Confetti width={1000} height={1000} />\n    } else {\n      everythingDone = null;\n    }\n  }\n\n  const [isEdiging, notEditing] = useState(false);\n\n  function handleSubmit(e) {\n    var y = newName;\n    if (y == \"\" || y == \" \") {\n      // alert(\"add input\");\n      props.notifyEmptyInput();\n      e.preventDefault();\n      notEditing(false);\n    } else {\n      e.preventDefault();\n      props.editTodo(props.id, newName);\n      setName(\"\");\n      notEditing(false);\n    }\n  }\n\n  const editingView = (\n\n    <form onSubmit={handleSubmit}>\n      <ListGroup.Item>\n        <Row>\n          <Col>\n            <input className=\"checkboxes\" id=\"todo-0\" type=\"checkbox\" defaultChecked={props.completed} onChange={() => props.toggleTaskCompleted(props.id)} />\n          </Col>\n          <Col>\n            {/* <Form.Group controlID=\"Text01\"> */}\n            {/* <Form.Control type=\"input\"></Form.Control> */}\n            {/* </Form.Group> */}\n            <input id={props.id} type=\"text\" value={newName} onChange={handleChange} />\n          </Col>\n          <Col>\n            <Form.Group controlID=\"Check02\">\n              {/* <Button variant=\"success\">DONE</Button> */}\n              <Button onClick={onClickHandler} variant=\"success\" onClick={handleSubmit}>SAVE</Button>\n              <Button onClick={onClickHandler} variant=\"danger\" onClick={() => notEditing(false)}>CANCEL</Button>\n            </Form.Group>\n          </Col>\n        </Row>\n      </ListGroup.Item>\n    </form>\n\n  )\n\n  const normalView = (\n\n    <ListGroup.Item>\n      <Row>\n        {props.everythingDone}\n        <Col>\n          <input className=\"checkboxes\" id=\"todo-0\" type=\"checkbox\" defaultChecked={props.completed} onChange={() => props.toggleTaskCompleted(props.id)} />\n        </Col>\n        <Col>\n          {/* <Form.Group controlID=\"Text01\"> */}\n          {/* <Form.Control type=\"input\"></Form.Control> */}\n          {/* </Form.Group> */}\n          {/* <TodoList/> */}\n          {this.state.todos.map(todolist => <li>{todolist.todo}</li>)} \n          {/* {props.name} */}\n        </Col>\n        <Col>\n          <Form.Group controlID=\"Check02\">\n            {/* <Button variant=\"success\">DONE</Button> */}\n            <Button onClick={onClickHandler} variant=\"primary\" onClick={() => notEditing(true)}>EDIT</Button>\n            <Button onClick={onClickHandler} variant=\"danger\" onClick={() => props.deleteTodo(props.id)}>DELETE</Button>\n          </Form.Group>\n        </Col>\n      </Row>\n    </ListGroup.Item>\n\n  )\n\n\n  return (\n    <li>{isEdiging ? editingView : normalView}</li>\n  )\n}"]},"metadata":{},"sourceType":"module"}