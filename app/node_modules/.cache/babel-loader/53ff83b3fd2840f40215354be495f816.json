{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/maluschymanski/Desktop/homework_sipgate/homework-maluechen-716992803757/app/src/App.js\",\n    _s = $RefreshSig$();\n\n// TODO\n// Variablen unbenennen \n// noch einmal alle Kommentage checken! \n// wenn eine Task \"zurÃ¼ckgeÃ¤ndert wird, dann darf nicht die push nachricht kommen \"\n// wenn todoliste empty, dann Textausgabe\nimport React, { useState, useRef, useEffect } from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Todo from \"./Todo\";\nimport TodoList from \"./TodoList\";\nimport Input from \"./Input\";\nimport FilterButtons from \"./FilterButtons\";\nimport { Container, ListGroup } from 'react-bootstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AddTask from './AddTask';\nimport DeleteTask from './DeleteTask';\nimport ShowSingleItem from './ShowSingleItem'; //Definiere Toastcontainer:\n//um spÃ¤ter die Pushbenachrichtigungen aud die Seite zu pushen\n\ntoast.configure(); //Filter definieren\n//1. All gibt alle eintrÃ¤ge zurÃ¼ck\n//2. Active gibt nur die EintrÃ¤ge zurÃ¼ck, bei denen completed auf nicht true gesetzt ist\n//3. completed gibgt nur die EintrÃ¤ge zurÃ¼ck, bei denen completed auf true gesetzt ist\n\nconst AllFilter = {\n  All: () => true,\n  NotCompleted: task => !task.completed,\n  completed: task => task.completed\n}; //Filter werden als Array zurÃ¼ckgegeben als Array \n// const FILTER_NAMES = Object.keys(AllFilter);\n//App ist die Parent-Komponente \n\nfunction App(props) {\n  _s();\n\n  //notify deklarieren und initialisieren - je nachdem welche Nachricht ausgegeben werden soll\n  const notify = () => toast('JUHUU! YOU MADE IT ðŸŽ‰ðŸŽ‰ðŸŽ‰');\n\n  const notifyEmptyInput = () => toast('no input ðŸ˜¥'); //Callbackprop: wird ausgelÃ¶st, wenn in FilterButtons der Button \"get shit done geklickt wird\"\n\n\n  function setActive(name) {\n    setFilter(name);\n  } //Callbackprop: wird ausgelÃ¶st, wenn in FilterButtons der Button \"DONE\"\n\n\n  function setAll(name) {\n    setFilter(name);\n  } //Callbackprop: wird ausgelÃ¶st, wenn in FilterButtons der Button \"ARCHIVE\"\n\n\n  function setDone(name) {\n    setFilter(name);\n  } //status von Filter wird geÃ¤ndert -> Default mÃ¤ÃŸig werden nur die noch nicht erledigten Todos angezeigt \n\n\n  const [filter, setFilter] = useState('NotCompleted'); //Funktion setTasks: Soll die EintrÃ¤ge Ã¤ndern\n  //erste Tasks von index.js Ã¼bernommen \n\n  const [tasks, setTasks] = useState(props.tasks); //RAUS?? \n  // const [height, setHeight] = useState(null);\n  // const [width, setWidth] = useState(null);\n  //mÃ¶gliche Erweiterung: \n  //Konfetti, wenn alle Aufgaben erledigt sind :) \n\n  let everythingDone = null; //synchronisiert ob task completed ist\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        notify();\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  } //LÃ¶scht das TODO mit der entsprechenden id\n\n\n  function deleteTodo(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  } //Ã¤ndert name zu newName des Eintrages mit der entsprechenden id\n\n\n  function editTodo(id, newName) {\n    const newTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          name: newName\n        };\n      } else {\n        return task;\n      }\n    });\n    setTasks(newTaskList);\n  } //Liste aller EintrÃ¤ge -> gefiltert je nach Filter \n  //auf jeden Eintrag die TODO Komponente angewandt\n\n\n  const taskList = tasks.filter(AllFilter[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTodo: deleteTodo,\n    editTodo: editTodo,\n    notifyEmptyInput: notifyEmptyInput\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 7\n  }, this)); //Callback Hooks \n\n  function addTask(name) {\n    const newTask = {\n      id: \"id\",\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u2728 NEW TODO \\u2728 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            newestOnTop: false,\n            closeOnClick: true,\n            rtl: false,\n            pauseOnFocusLoss: true,\n            draggable: true,\n            pauseOnHover: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddTask, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u2728 DELETE TODO \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(DeleteTask, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u2728 YOUR TODO LIST \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"SHOW SINGLE ITEM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ShowSingleItem, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"mdQbSDMZdeydo2GtQbS58ZGOIKc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/maluschymanski/Desktop/homework_sipgate/homework-maluechen-716992803757/app/src/App.js"],"names":["React","useState","useRef","useEffect","Todo","TodoList","Input","FilterButtons","Container","ListGroup","ToastContainer","toast","AddTask","DeleteTask","ShowSingleItem","configure","AllFilter","All","NotCompleted","task","completed","App","props","notify","notifyEmptyInput","setActive","name","setFilter","setAll","setDone","filter","tasks","setTasks","everythingDone","toggleTaskCompleted","id","updatedTasks","map","deleteTodo","remainingTasks","editTodo","newName","newTaskList","taskList","addTask","newTask"],"mappings":"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","sourcesContent":["// TODO\n// Variablen unbenennen \n// noch einmal alle Kommentage checken! \n// wenn eine Task \"zurÃ¼ckgeÃ¤ndert wird, dann darf nicht die push nachricht kommen \"\n// wenn todoliste empty, dann Textausgabe\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Todo from \"./Todo\";\nimport TodoList from \"./TodoList\";\nimport Input from \"./Input\";\nimport FilterButtons from \"./FilterButtons\";\nimport { Container, ListGroup } from 'react-bootstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AddTask from './AddTask';\nimport DeleteTask from './DeleteTask';\nimport ShowSingleItem from './ShowSingleItem';\n\n//Definiere Toastcontainer:\n//um spÃ¤ter die Pushbenachrichtigungen aud die Seite zu pushen\ntoast.configure()\n\n//Filter definieren\n//1. All gibt alle eintrÃ¤ge zurÃ¼ck\n//2. Active gibt nur die EintrÃ¤ge zurÃ¼ck, bei denen completed auf nicht true gesetzt ist\n//3. completed gibgt nur die EintrÃ¤ge zurÃ¼ck, bei denen completed auf true gesetzt ist\nconst AllFilter = {\n  All: () => true,\n  NotCompleted: task => !task.completed,\n  completed: task => task.completed\n}\n\n//Filter werden als Array zurÃ¼ckgegeben als Array \n// const FILTER_NAMES = Object.keys(AllFilter);\n\n//App ist die Parent-Komponente \nfunction App(props) {\n\n  //notify deklarieren und initialisieren - je nachdem welche Nachricht ausgegeben werden soll\n  const notify = () => toast('JUHUU! YOU MADE IT ðŸŽ‰ðŸŽ‰ðŸŽ‰');\n  const notifyEmptyInput = () => toast('no input ðŸ˜¥');\n\n  //Callbackprop: wird ausgelÃ¶st, wenn in FilterButtons der Button \"get shit done geklickt wird\"\n  function setActive(name) {\n    setFilter(name);\n  }\n\n  //Callbackprop: wird ausgelÃ¶st, wenn in FilterButtons der Button \"DONE\"\n  function setAll(name) {\n    setFilter(name);\n  }\n\n  //Callbackprop: wird ausgelÃ¶st, wenn in FilterButtons der Button \"ARCHIVE\"\n  function setDone(name) {\n    setFilter(name);\n  }\n\n  //status von Filter wird geÃ¤ndert -> Default mÃ¤ÃŸig werden nur die noch nicht erledigten Todos angezeigt \n  const [filter, setFilter] = useState('NotCompleted');\n\n  //Funktion setTasks: Soll die EintrÃ¤ge Ã¤ndern\n  //erste Tasks von index.js Ã¼bernommen \n  const [tasks, setTasks] = useState(props.tasks);\n\n  //RAUS?? \n  // const [height, setHeight] = useState(null);\n  // const [width, setWidth] = useState(null);\n\n  //mÃ¶gliche Erweiterung: \n  //Konfetti, wenn alle Aufgaben erledigt sind :) \n  let everythingDone = null;\n\n  //synchronisiert ob task completed ist\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        notify();\n        return { ...task, completed: !task.completed }\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  //LÃ¶scht das TODO mit der entsprechenden id\n  function deleteTodo(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  //Ã¤ndert name zu newName des Eintrages mit der entsprechenden id\n  function editTodo(id, newName) {\n    const newTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task, name: newName }\n      } else {\n        return task;\n      }\n    });\n    setTasks(newTaskList);\n  }\n\n  //Liste aller EintrÃ¤ge -> gefiltert je nach Filter \n  //auf jeden Eintrag die TODO Komponente angewandt\n  const taskList = tasks\n    .filter(AllFilter[filter])\n    .map(task => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTodo={deleteTodo}\n        editTodo={editTodo}\n        notifyEmptyInput={notifyEmptyInput}\n      />\n    )\n    );\n\n  //Callback Hooks \n  function addTask(name) {\n    const newTask = { id: \"id\", name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Container>\n          <h3>âœ¨ NEW TODO âœ¨ </h3>\n          <div>\n            <ToastContainer\n              position=\"top-right\"\n              autoClose={5000}\n              hideProgressBar={false}\n              newestOnTop={false}\n              closeOnClick\n              rtl={false}\n              pauseOnFocusLoss\n              draggable\n              pauseOnHover\n            />\n            {/* Same as */}\n            <ToastContainer />\n          </div>\n          <AddTask/>\n          {/* <Input addTask={addTask} notifyEmptyInput={notifyEmptyInput} /> */}\n          {/* {filterList} */}\n          {/* <FilterButtons setActive={setActive} setAll={setAll} setDone={setDone}></FilterButtons> */}\n        </Container>\n        <Container>\n        <h3>âœ¨ DELETE TODO âœ¨</h3>\n        <DeleteTask/>\n        </Container>\n        <Container>\n          <h3>âœ¨ YOUR TODO LIST âœ¨</h3>\n          {/* <ul>\n            <ListGroup>\n              {taskList}\n            </ListGroup>\n          </ul> */}\n          <TodoList/>\n        </Container>\n         <Container>\n          <h3>SHOW SINGLE ITEM</h3>\n          <ShowSingleItem/>\n        </Container> \n      </header>\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}